#include <stdio.h>
#include <stdlib.h>
#define MAX_TREE 100
struct MHN
{
  char data;
  unsigned freq;
  struct MHN *left, *right;
};

struct MH
{
  unsigned s;
  unsigned capacity;
  struct MHN **array;
};

struct MHN *newNode(char data, unsigned freq)
{
  struct MHN *temp = (struct MHN *)malloc(sizeof(struct MHN));

  temp->left = temp->right = NULL;
  temp->data = data;
  temp->freq = freq;

  return temp;
}

struct MH *createMH(unsigned capacity)
{
  struct MH *minHeap = (struct MH *)malloc(sizeof(struct MH));

  minHeap->s = 0;

  minHeap->capacity = capacity;

  minHeap->array = (struct MHN **)malloc(minHeap->capacity * sizeof(struct MHN *));
  return minHeap;
}

void swapMHN(struct MHN **a, struct MHN **b)
{
  struct MHN *t = *a;
  *a = *b;
  *b = t;
}

void minHeapify(struct MH *minHeap, int id)
{
  int smallest = id;
  int left = 2 * id + 1;
  int right = 2 * id+ 2;

  if (left < minHeap->s&& minHeap->array[left]->freq < minHeap->array[smallest]->freq)
    smallest = left;

  if (right < minHeap->s && minHeap->array[right]->freq< minHeap->array[smallest]->freq)
    smallest = right;

  if (smallest != id)
  {
    swapMHN(&minHeap->array[smallest], &minHeap->array[id]);
    minHeapify(minHeap, smallest);
  }
}

int isSizeOne(struct MH *minHeap)
{
  return (minHeap->s == 1);
}

struct MHN *extractMin(struct MH *minHeap)
{
  struct MHN *temp = minHeap->array[0];
  minHeap->array[0] = minHeap->array[minHeap->s- 1];

  --minHeap->s;
  minHeapify(minHeap, 0);

  return temp;
}

void insertMH(struct MH *minHeap, struct MHN *minHeapNode)
{
  ++minHeap->s;
  int q = minHeap->s- 1;

  while (q&&minHeapNode->freq< minHeap->array[(q - 1)/ 2]->freq)
  {
    minHeap->array[q] = minHeap->array[(q - 1) / 2];
    q= (q- 1) / 2;
  }
  minHeap->array[q] = minHeapNode;
}

void buildMinHeap(struct MH *minHeap)
{
  int n = minHeap->s- 1;
  int c;

  for (c= (n - 1) / 2; c >= 0;--c)
    minHeapify(minHeap, c);
}

void printArray(int arr[], int n)
{
  int v;
  for (v = 0; v< n; v++)
    printf("%d", arr[v]);

  printf("\n");
}

int isLeaf(struct MHN *root)
{

  return !(root->left) && !(root->right);
}

struct MH *createAndBuildMH(char data[], int freq[], int s)
{
  struct MH *minHeap = createMH(s);

  for (int x= 0; x< s;x++)
    minHeap->array[x] = newNode(data[x], freq[x]);

  minHeap->s = s;
  buildMinHeap(minHeap);

  return minHeap;
}

struct MHN *buildHuffmanTree(char data[], int freq[], int s)
{
  struct MHN *left, *right, *top;
  struct MH *minHeap = createAndBuildMH(data, freq, s);

  while (!isSizeOne(minHeap))
  {

    left = extractMin(minHeap);
    right = extractMin(minHeap);

    top = newNode('$', left->freq+ right->freq);

    top->left = left;
    top->right = right;

    insertMH(minHeap, top);
  }
  return extractMin(minHeap);
}

void Codes(struct MHN *root, int arr[], int top)
{
  if (root->left)
  {

    arr[top] = 0;
    Codes(root->left, arr, top + 1);
  }
  if (root->right)
  {

    arr[top] = 1;
    Codes(root->right, arr, top + 1);
  }
  if (isLeaf(root))
  {

    printf("  %c ", root->data);
    printArray(arr, top);
  }
}

void Huffman(char data[], int freq[], int s)
{
  struct MHN*root = buildHuffmanTree(data, freq, s);

  int arr[MAX_TREE], top = 0;

  Codes(root, arr, top);
}

int main()
{
  char arr[] = {'s','u','n','a','v','h','y','i','e','p','d','o','k'};  //team member names:sunainanayakvishnupriyadoddapanenisandeep//
  int freq[] = {3,2,7,8,1,1,2,4,3,3,4,1,1};
  int s= sizeof(arr) / sizeof(arr[0]);
printf(" \nThe Huffman code are as follows:\n ");
Huffman(arr, freq, s);
}
